font <- "mono"
theme_minimal() %+replace%
theme(
panel.background = element_rect(fill = "#272b30"),
panel.border = element_rect(linetype = 1, fill = NA, color = "grey50"),
plot.background = element_rect(
fill = "#272b30", color = NA,
linetype = 0
),
axis.text = element_text(color = "grey80"),
title = element_text(color = "#7a8288", face = "bold"),
plot.title = element_text(size = 20, margin = margin(0, 0, 10, 0)),
plot.subtitle = element_text(hjust = .5, margin = margin(0, 0, 10, 0)),
legend.text = element_text(color = "grey60"),
legend.key = element_rect(fill = "#272b30", linetype = 0),
legend.background = element_rect(fill = "#272b30", linetype = 0),
strip.background = element_rect(
fill = "#272b30",
color = "grey50"
),
strip.text = element_text(color = "grey80"),
text = element_text(family = "mono"),
panel.grid.minor = element_line(color = "grey25"),
panel.grid.major = element_line(color = "grey25"),
legend.position = "bottom"
)
}
iris %>% ggplot(aes(Sepal.Length, Sepal.Width)) + geom_point() + theme_slate()
library(roxygen2)
library(usethis)
devtools::load_all()
devtools::install()
devtools::document()
devtools::install()
library(lykkelib)
?theme_slate
library(devtools)
library(usethis)
use_r("scale_fill_lykke")
use_git()
pacman::p_load(usethis, devtools)
check()
roxygen2::roxygenize()
check()
load_all()
check()
use_mit_license()
check()
ggplot2::scale_fill_brewer
document()
install()
sdu_colors <- c(
`beige` = "#DDCBA4",
`brown` = "#7A6040",
`pink` = "#E1BBB4",
`red`        = "#D05A57",
`green`      = "#789D4A",
`lighgreen` = "#AEB862",
`blue`       = "#00aedb",
`orange`     = "#E07E3C",
`yellow`     = "#F2C75C",
`light grey` = "#cccccc",
`dark grey`  = "#8c8c8c")
sdu_colors
sdu_colors <- c(
"beige" = "#DDCBA4",
`brown` = "#7A6040",
`pink` = "#E1BBB4",
`red`        = "#D05A57",
`green`      = "#789D4A",
`lighgreen` = "#AEB862",
`blue`       = "#00aedb",
`orange`     = "#E07E3C",
`yellow`     = "#F2C75C",
`light grey` = "#cccccc",
`dark grey`  = "#8c8c8c")
sdu_colors
styler:::style_active_file()
sdu_colors <- c(
"beige" = "#DDCBA4",
"brown" = "#7A6040",
"pink" = "#E1BBB4",
"red" = "#D05A57",
"green" = "#789D4A",
"lighgreen" = "#AEB862",
"blue" = "#00aedb",
"orange" = "#E07E3C",
"yellow" = "#F2C75C",
)
sdu_colors <- c(
"beige" = "#DDCBA4",
"brown" = "#7A6040",
"pink" = "#E1BBB4",
"red" = "#D05A57",
"green" = "#789D4A",
"lighgreen" = "#AEB862",
"blue" = "#00aedb",
"orange" = "#E07E3C",
"yellow" = "#F2C75C"
)
sdu_colors
styler:::style_active_file()
#' Function to extract sdu colors as hex codes
#'
#' @param ... Character names of sdu colors
#'
sdu_cols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (sdu_colors)
sdu_colors[cols]
}
sdu_colors
sdu_cols()
sdu_cols("beige")
use_r("lykke_colors")
styler:::style_active_file()
use_r("lykke_scales")
document()
styler:::style_active_file()
lykke_pal <- function(palette = "sdu_colors", alpha = 1, reverse = FALSE) {
pal <- lykke_palettes[[palette]]
if (reverse) {
pal <- rev(pal)
}
return(colorRampPalette(pal, alpha))
}
lykke_pal(palette = "sdu_colors")
library(ggplot2)
styler:::style_active_file()
document()
librar
library(devtools)
library(usethis)
document()
styler:::style_active_file()
document()
check()
document()
check()
library(lykkelib)
library(magrittr)
library(ggplot2)
#' Color scale constructor for lykke colors
#'
#' @param palette Character name of palette in lykke_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
#' @export
#'
scale_color_lykke <- function(palette = "sdu_colors", discrete = TRUE, reverse = FALSE, ...) {
pal <- lykke_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("color", paste0("lykke_colors", palette), palette = pal, ...)
} else {
scale_color_gradientn(colors = pal(256), ...)
}
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke()
lykke_pal <- function(palette = "sdu_colors", reverse = FALSE, ...) {
pal <- lykke_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke()
#' My own color palettes
#'
#' @export
#'
lykke_palettes <- list(
sdu_colors <- c(
"beige" = "#DDCBA4",
"brown" = "#7A6040",
"pink" = "#E1BBB4",
"red" = "#D05A57",
"green" = "#789D4A",
"lighgreen" = "#AEB862",
"blue" = "#00aedb",
"orange" = "#E07E3C",
"yellow" = "#F2C75C"
)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(discrete = TRUE)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(discrete = TRUE, palette = "sdu_colors")
styler:::style_active_file()
devtools::document()
devtools::load_all()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(discrete = TRUE, palette = "sdu_colors")
library(magrittr)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(discrete = TRUE, palette = "sdu_colors")
devtools::document()
styler:::style_active_file()
#' My own color palettes
#'
#' @export
#'
lykke_palettes <- list(
sdu_colors <- c(
"#DDCBA4",
"#7A6040",
"#E1BBB4",
"#D05A57",
"#789D4A",
"#AEB862",
"#00aedb",
"#E07E3C",
"#F2C75C"
),
branded_colors <- c(
"blue"   = "#00798c",
"red"    = "#d1495b",
"yellow" = "#edae49",
"green"  = "#66a182",
"navy"   = "#2e4057",
"grey"   = "#8d96a3"
),
greens <- c(
"#b39c4d",
"#768948",
"#607744",
"#34623f",
"#1e2f23"
)
lykke_palettes
styler:::style_active_file()
#' My own color palettes
#'
#' @export
#'
lykke_palettes <- list(
sdu_colors <- c(
"#DDCBA4",
"#7A6040",
"#E1BBB4",
"#D05A57",
"#789D4A",
"#AEB862",
"#00aedb",
"#E07E3C",
"#F2C75C"
),
branded_colors <- c(
"#00798c",
"#d1495b",
"#edae49",
"#66a182",
"#2e4057",
"#8d96a3"
),
greens <- c(
"#b39c4d",
"#768948",
"#607744",
"#34623f",
"#1e2f23"
)
lykke_palettes
styler:::style_active_file()
lykke_palettes
lykke_palettes["sdu_color"]
lykke_palettes["sdu_colors"]
lykke_palettes[1]
devtools::install_github("ropenscilabs/ochRe")
library(ochre)
library(ochRe)
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + theme_slate() + scale_color_ochre( palette = "winmar")
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(shape = 21, size = 2) + theme_slate() + scale_color_ochre( palette = "winmar")
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(shape = 21, size = 2) + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 2, color = "white") + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 2, color = "grey50") + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 2, color = "grey50") + theme_slate() + scale_color_ochre(palette = "winmar")
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(shape = 21, size = 2) + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 2) + theme_slate() + scale_color_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 2) + theme_slate() + scale_fill_ochre()
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, fill = Species)) + geom_point(shape = 21, size = 4, color = "grey40") + theme_slate() + scale_fill_ochre()
usethis::use_r("lykke_scales")
styler:::style_active_file()
#' My own color palettes
#'
#' @export
#'
lykke_palettes <- list(
sdu_colors = c(
"#DDCBA4",
"#7A6040",
"#E1BBB4",
"#D05A57",
"#789D4A",
"#AEB862",
"#00aedb",
"#E07E3C",
"#F2C75C"
),
branded_colors = c(
"#00798c",
"#d1495b",
"#edae49",
"#66a182",
"#2e4057",
"#8d96a3"
),
greens = c(
"#000f08",
"#1c3738",
"#4d4847",
"#f4fff8",
"#8baaad",
"#f5fdc6",
"#f5c396",
"#d0b17a",
"#a89f68",
"#aebd93"
)
lykke_palettes
styler:::style_active_file()
devtools::document()
devtools::check()
#' Fetch palette from lykke_palettes
#' @param palette Choose from 'lykke_palettes' list
#'
#' @param alpha transparency
#'
#' @param reverse If TRUE, the direction of the colors is reversed.
#'
#' @export
#' @importFrom grDevices colorRampPalette
lykke_pal <- function(palette = "sdu_colors", alpha = 1, reverse = FALSE) {
pal <- lykke_palettes[[palette]]
if (reverse) {
pal <- rev(pal)
}
return(colorRampPalette(pal, alpha))
}
lykke_pal("sdu_colors")
lykke_pal("sdu_colors")(10)
lykke_pal("sdu_colors")(20)
lykke_pal()
devtools::document
devtools::document()
library(devtools)
document()
check()
load_all()
library(tidyverse)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "greens")
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors")
mtcars
mtcars %>%
ggplot(aes(mpg, hp, color = cyl)) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors")
mtcars %>%
ggplot(aes(mpg, hp, color = cyl)) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors", discrete = F)
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors)
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors)
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point() +
theme_slate() +
scale_color_lykke(palette = "branded_colors")
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point() +
theme_slate() +
scale_color_lykke()
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point(size = 5) +
theme_slate() +
scale_color_lykke()
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point(size = 5) +
theme_slate() +
scale_color_lykke("branded_colors")
mtcars %>%
ggplot(aes(mpg, hp, color = factor(cyl))) +
geom_point(size = 5) +
theme_slate() +
scale_color_lykke(palette = "branded_colors")
gcv()
devtools::document()
devtools::load_all()
library(devtools)
devtools::build()
Sigurd15Elva17Anker19
library(lykkelib)
extrafont::fonts()
extrafont::font_install()
extrafont::font_install("fontcm")
extrafont::font_import()
devtools::install_github("moldach/vapoRwave", build_vignettes=TRUE)
devtools::install_github("moldach/vapoRwave", build_vignettes=F)
library(vapoRwave)
lykkelib
library(devtools)
document()
check()
library(devtools)
check()
library(lykkelib)
extrafont::fonts()
library(extrafont)
loadfonts()
loadfonts(device = "win")
fonts
fonts()
fonttable()
fonts
fonts()
loadfonts()
library(extrafont)
library(devtools)
font_import()
Sigurd15Elva17Anker19
remotes::install_version("Rttf2pt1", version = "1.3.8")
font_import()
ttf_import()
fonts()
font_import(pattern = "SFAlienEncounters")
install("Rttf2pt1")
install.packages("Rttf2pt1")
font_import(pattern = "SFAlienEncounters")
library(extrafont)
font_import(pattern = "SFAlienEncounters")
font_import(paths = "C:/Windows/Fonts", prompt = F)
font_import(paths = "C:/Windows/Fonts", prompt = F, pattern = "SFAlienEncounters")
list.files("C:/windows/fonts")
list.files("C:/windows/fonts", pattern = "alian")
list.files("C:/windows/fonts", pattern = "alien")
list.files("C:/windows/fonts", pattern = "sfalien")
font_import(path = "C:/Users/eskovgaard/AppData/Local/Microsoft/Windows/Fonts", pattern = ".TTF")
font_import(path = "C:/Users/eskovgaard/AppData/Local/Microsoft/Windows/Fonts", pattern = ".TTF", prompt = F)
font_import()
font_import(paths = "C:/Users/eskovgaard/Desktop/temp")
fonts()
font_import(path = "C:/Users/eskovgaard/AppData/Local/Microsoft/Windows/Fonts", pattern = ".TTF", prompt = F)
list.files("C:/Windows/Fonts", pattern="\\.ttf")
font_import(pattern = "SFAlienEncounters.ttf")
install.packages('ragg')
install.packages('systemfonts')
install.packages('textshaping')
systemfonts::font_info()
library(lykkelib)
library(tidyverse)
iris %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size = 4) + theme_retro()
library(devtools)
document
document()
check()
library(lykkelib)
styler:::style_active_file()
devtools::build()
styler:::style_active_file()
devtools::document()
devtools::document
devtools::document()
